package src.view.Administrador.CursosAdm;

import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import src.util.ConexionBD;  
import java.sql.PreparedStatement;

public class PanelTablaAlumnos extends javax.swing.JPanel {

    public PanelTablaAlumnos() {
        initComponents();     
        cargarCursos();     
        
        DefaultTableModel modelo = new DefaultTableModel(
            new String[] { "ID", "Nombre", "Apellido", "Correo", "Código" }, 0
        );
        tablaAlumnos.setModel(modelo);

        tablaAlumnos.getColumnModel().getColumn(0).setMinWidth(0);
        tablaAlumnos.getColumnModel().getColumn(0).setMaxWidth(0);
        tablaAlumnos.getColumnModel().getColumn(0).setWidth(0);

        tablaAlumnos.setRowSelectionAllowed(true);
        tablaAlumnos.setColumnSelectionAllowed(false);
        tablaAlumnos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        
    }

    private static class CursoInfo {
        int cursoID;
        int docID;
        CursoInfo(int cursoID, int docID) {
            this.cursoID = cursoID;
            this.docID   = docID;
        }
    }
    private CursoInfo obtenerCursoInfo(String cursoCodigo) throws SQLException {
        String sql = """
            SELECT c.cursoID, cd.docID
            FROM   Curso        c
            JOIN   CursoDocente cd ON cd.cursoID = c.cursoID
            WHERE  c.cursoCodigo = ?
            """;

        try (Connection cn = new ConexionBD().establecerConexion();
             PreparedStatement ps = cn.prepareStatement(sql)) {

            ps.setString(1, cursoCodigo);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next() ? new CursoInfo(rs.getInt("cursoID"),
                                                 rs.getInt("docID"))
                                 : null;       
            }
        }
    }
    
    private void cargarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tablaAlumnos.getModel();
        modelo.setRowCount(0);

        final String sql = """
            SELECT estID, nombre, apellido, correo, codEst
            FROM   Estudiante
            WHERE  estado = 1
            ORDER  BY apellido, nombre
            """;

        try (Connection cn = new ConexionBD().establecerConexion();
             Statement  st = cn.createStatement();
             ResultSet  rs = st.executeQuery(sql)) {

            while (rs.next()) {
                modelo.addRow(new Object[] {
                    rs.getInt("estID"),
                    rs.getString("nombre"),
                    rs.getString("apellido"),
                    rs.getString("correo"),
                    rs.getString("codEst")
                });
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                this,
                "Error al cargar alumnos:\n" + ex.getMessage(),
                "BD", JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    private void cargarCursos() {
        tablaComboCursos.removeAllItems();          
        tablaComboCursos.addItem("Seleccionar curso"); 

        String sql = "SELECT DISTINCT cursoNombre "+ "FROM Curso " + "ORDER BY cursoNombre";  

        try (Connection cn = new ConexionBD().establecerConexion();
             Statement  st = cn.createStatement();
             ResultSet  rs = st.executeQuery(sql)) {

            while (rs.next()) {
                tablaComboCursos.addItem(rs.getString("cursoNombre"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                "Error al cargar cursos:\n" + ex.getMessage(),
                "BD", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void cargarCodigos(String curso) {
        tablaComboCodigos.removeAllItems();
        tablaComboCodigos.addItem("Código curso ");

        String sql = "SELECT DISTINCT cursoCodigo "
                   + "FROM Curso "
                   + "WHERE cursoNombre = ? "
                   + "ORDER BY cursoCodigo";

        try (Connection cn = new ConexionBD().establecerConexion();
             PreparedStatement ps = cn.prepareStatement(sql)) {

            ps.setString(1, curso);         
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    tablaComboCodigos.addItem(rs.getString("cursoCodigo"));
                }
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                "Error al cargar códigos:\n" + ex.getMessage(),
                "BD", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlumnos = new javax.swing.JTable();
        panelTablaAlumnosbtnMostrar = new javax.swing.JButton();
        tablaComboCursos = new javax.swing.JComboBox<>();
        panelTablaAlumnosBtnAgregar = new javax.swing.JButton();
        tablaComboCodigos = new javax.swing.JComboBox<>();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TABLA DE ESTUDIANTES");

        tablaAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Correo", "Codigo"
            }
        ));
        jScrollPane1.setViewportView(tablaAlumnos);

        panelTablaAlumnosbtnMostrar.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        panelTablaAlumnosbtnMostrar.setText("Mostrar");
        panelTablaAlumnosbtnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panelTablaAlumnosbtnMostrarActionPerformed(evt);
            }
        });

        tablaComboCursos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Curso", "Item 2", "Item 3", "Item 4" }));
        tablaComboCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablaComboCursosActionPerformed(evt);
            }
        });

        panelTablaAlumnosBtnAgregar.setBackground(new java.awt.Color(51, 102, 255));
        panelTablaAlumnosBtnAgregar.setFont(new java.awt.Font("Dialog", 0, 17)); // NOI18N
        panelTablaAlumnosBtnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        panelTablaAlumnosBtnAgregar.setText("AGREGAR");
        panelTablaAlumnosBtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panelTablaAlumnosBtnAgregarActionPerformed(evt);
            }
        });

        tablaComboCodigos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Codigo Curso", "Item 2", "Item 3", "Item 4" }));
        tablaComboCodigos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablaComboCodigosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panelTablaAlumnosBtnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(panelTablaAlumnosbtnMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(231, 231, 231)
                                    .addComponent(tablaComboCursos, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(42, 42, 42)
                                    .addComponent(tablaComboCodigos, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(panelTablaAlumnosbtnMostrar)
                    .addComponent(tablaComboCodigos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tablaComboCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelTablaAlumnosBtnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void panelTablaAlumnosbtnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panelTablaAlumnosbtnMostrarActionPerformed
        cargarTabla();
    }//GEN-LAST:event_panelTablaAlumnosbtnMostrarActionPerformed

    private void tablaComboCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablaComboCursosActionPerformed
        String curso = (String) tablaComboCursos.getSelectedItem();
        if (curso != null && !curso.startsWith("Seleccionar")) {
            cargarCodigos(curso);  
        } else {
            tablaComboCodigos.removeAllItems(); 
            tablaComboCodigos.addItem("Código curso");
        }
    }//GEN-LAST:event_tablaComboCursosActionPerformed

    private void tablaComboCodigosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablaComboCodigosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaComboCodigosActionPerformed

    private void panelTablaAlumnosBtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panelTablaAlumnosBtnAgregarActionPerformed
        int fila = tablaAlumnos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this,
                "Selecciona un alumno.", "Aviso",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String cursoCodigo = (String) tablaComboCodigos.getSelectedItem();

        if (cursoCodigo == null || cursoCodigo.startsWith("Seleccionar")) {
            JOptionPane.showMessageDialog(this,
                "Elige un código de curso.", "Aviso",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            Integer estID = (Integer) tablaAlumnos.getValueAt(fila, 0);
            CursoInfo info   = obtenerCursoInfo(cursoCodigo); 

            
            if (estID == null || info == null) {
                JOptionPane.showMessageDialog(this,
                "No se obtuvo el ID del alumno o no se encontró el curso/docente.",
                "BD", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String sql = """
                INSERT INTO EstudianteCurso
                    (estID, cursoID, fechaInscripcion,
                     estado, participacionTotal, docID)
                VALUES (?, ?, GETDATE(), 'activo', 0, ?)
                """;

            try (Connection cn = new ConexionBD().establecerConexion();
                 PreparedStatement ps = cn.prepareStatement(sql)) {

                ps.setInt(1, estID);
                ps.setInt(2, info.cursoID);
                ps.setInt(3, info.docID);    
                ps.executeUpdate();

                JOptionPane.showMessageDialog(this,
                    "Alumno inscrito correctamente.");
                tablaAlumnos.clearSelection();
                tablaComboCodigos.setSelectedIndex(0);
            }

        } catch (SQLException ex) {
            if (ex.getErrorCode() == 2627) {   
                JOptionPane.showMessageDialog(this,
                    "NO SE PUDO AGREGAR.  El alumno se cuentra INSCRITO en ese curso.",
                    "Duplicado", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this,
                    "Error al inscribir:\n" + ex.getMessage(),
                    "BD", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_panelTablaAlumnosBtnAgregarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton panelTablaAlumnosBtnAgregar;
    private javax.swing.JButton panelTablaAlumnosbtnMostrar;
    private javax.swing.JTable tablaAlumnos;
    private javax.swing.JComboBox<String> tablaComboCodigos;
    private javax.swing.JComboBox<String> tablaComboCursos;
    // End of variables declaration//GEN-END:variables
}
